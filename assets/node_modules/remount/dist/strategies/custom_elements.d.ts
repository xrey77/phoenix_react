/**
 * Registers a custom element.
 *
 * This creates a custom element (ie, a subclass of `window.HTMLElement`) and
 * registers it (ie, `window.customElements.define`).
 *
 * Events will be triggered when something interesting happens.
 *
 * @example
 *     defineElement(
 *       { component: Tooltip },
 *       'x-tooltip',
 *       { onUpdate, onUnmount }
 *     )
 *
 * @private
 * @param {ElementSpec} elSpec
 * @param {string} elName
 * @param {ElementEvents} events
 */
export function defineElement(elSpec: ElementSpec, elName: string, events: ElementEvents): void;
export function isSupported(): boolean;
/**
 * Check if Shadow DOM is supported.
 */
export function supportsShadow(): boolean;
/**
 * The name of this strategy.
 * @type string
 */
export const name: string;
export type Adapter = import('../types').Adapter;
export type Component = import('../types').Component;
export type Defaults = import('../types').Defaults;
export type ElementMap = import('../types').ElementMap;
export type ElementSpec = import('../types').ElementSpec;
export type ElementEvents = import('../types').ElementEvents;
export type ReactAdapter = import('../types').ReactAdapter;
export type PropertyMap = import('../types').PropertyMap;
